import Groq from 'groq-sdk';

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

export interface PostGenerationRequest {
  topic?: string;
  category?: string;
}

export interface GeneratedPost {
  title: string;
  content: string;
  excerpt: string;
  categories: string[];
  tags: string[];
}

// Topics related to IT, Software Engineering, and Technology
const TECH_TOPICS = [
  "Architecture microservices et scalabilit√©",
  "DevOps et CI/CD: bonnes pratiques",
  "Intelligence Artificielle et Machine Learning",
  "D√©veloppement d'applications mobiles cross-platform",
  "S√©curit√© informatique et cybers√©curit√©",
  "Cloud Computing: AWS, Azure, GCP",
  "D√©veloppement web avec React et Next.js",
  "APIs RESTful et GraphQL",
  "Containers Docker et orchestration Kubernetes",
  "Bases de donn√©es NoSQL vs SQL",
  "Architecture serverless et fonctions cloud",
  "Tests automatis√©s et TDD",
  "Performance web et optimisation",
  "Blockchain et d√©veloppement DApps",
  "Progressive Web Apps (PWA)",
  "TypeScript et d√©veloppement type-safe",
  "Design patterns en programmation",
  "Monitoring et observabilit√© des applications",
  "D√©veloppement d'APIs avec Node.js",
  "React Native et d√©veloppement mobile",
  "Automatisation et scripting",
  "Clean Code et architecture logicielle",
  "Git workflows et collaboration",
  "Tech Leadership et gestion d'√©quipe",
  "Outils de d√©veloppement et productivit√©"
];

const CATEGORIES = [
  "D√©veloppement Web",
  "DevOps & Cloud", 
  "Architecture Logicielle",
  "Mobile Development",
  "Data & AI",
  "S√©curit√©",
  "Tech Leadership"
];

export async function generateRandomPost(): Promise<GeneratedPost> {
  // Select random topic and category
  const randomTopic = TECH_TOPICS[Math.floor(Math.random() * TECH_TOPICS.length)];
  const randomCategory = CATEGORIES[Math.floor(Math.random() * CATEGORIES.length)];  const prompt = `
R√©digez un article de blog technique COMPLET et D√âTAILL√â sur le sujet "${randomTopic}" pour la cat√©gorie "${randomCategory}".

CONTEXTE: Vous √©crivez pour un blog technique destin√© aux d√©veloppeurs, ing√©nieurs logiciel et architectes techniques. L'article doit √™tre professionnel, informatif et actionnable.

STRUCTURE OBLIGATOIRE (personnalisez le contenu pour ${randomTopic}):

1. **Introduction engageante** (2-3 paragraphes)
   - Pourquoi ${randomTopic} est pertinent aujourd'hui
   - Probl√®mes concrets que cela r√©sout
   - Ce que le lecteur va apprendre

2. **Contexte et enjeux sp√©cifiques √† ${randomTopic}**
   - D√©fis techniques actuels li√©s √† ce sujet
   - Impact sur les √©quipes de d√©veloppement
   - Tendances du march√©

3. **Concepts fondamentaux de ${randomTopic}**
   - D√©finitions techniques pr√©cises
   - Principes cl√©s √† retenir
   - Diff√©rences avec les approches alternatives

4. **Mise en pratique concr√®te**
   - Exemples de code sp√©cifiques √† ${randomTopic}
   - √âtapes d'impl√©mentation d√©taill√©es
   - Configuration et setup

5. **Bonnes pratiques pour ${randomTopic}**
   - Recommandations bas√©es sur l'exp√©rience
   - Erreurs courantes √† √©viter
   - Patterns et anti-patterns

6. **Outils et √©cosyst√®me de ${randomTopic}**
   - Technologies compl√©mentaires
   - Frameworks et biblioth√®ques recommand√©s
   - Solutions du march√©

7. **Cas d'usage r√©els**
   - Exemples d'entreprises utilisant ${randomTopic}
   - Retours d'exp√©rience concrets
   - M√©triques et r√©sultats

8. **Perspectives d'avenir**
   - √âvolutions pr√©vues de ${randomTopic}
   - Nouvelles tendances √©mergentes
   - Recommandations pour rester √† jour

EXIGENCES DE CONTENU:
- Minimum 1200 mots de contenu substantiel et unique
- Chaque section doit √™tre sp√©cifiquement adapt√©e √† ${randomTopic}
- Inclure des exemples de code r√©alistes quand pertinent
- Mentionner des outils, frameworks ou technologies sp√©cifiques √† ce domaine
- Citer des entreprises, projets open-source ou √©tudes de cas r√©els
- Ton professionnel mais accessible
- √âviter les g√©n√©ralit√©s, privil√©gier le concret et l'actionnable

R√âPONDEZ UNIQUEMENT avec ce JSON (sans texte avant/apr√®s):

{
  "title": "Titre professionnel et accrocheur sp√©cifique √† ${randomTopic}",
  "content": "Article complet en markdown avec les 8 sections d√©taill√©es ci-dessus",
  "excerpt": "R√©sum√© engageant en 2-3 phrases d√©crivant les b√©n√©fices concrets (max 200 caract√®res)",
  "categories": ["${randomCategory}"],
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"]
}

IMPORTANT: √âchappez tous les guillemets avec \\" et utilisez \\n pour les retours √† la ligne dans le JSON.
`;
  
  // Try multiple models in case one fails
  const models = [
    "meta-llama/llama-4-scout-17b-16e-instruct",    // Latest Llama 4 - 30k tokens/min (No daily limit)
    "meta-llama/llama-4-maverick-17b-128e-instruct", // Latest Llama 4 - 6k tokens/min (No daily limit)
    "llama-3.3-70b-versatile",                       // Llama 3.3 70B - 12k tokens/min, 100k/day
    "deepseek-r1-distill-llama-70b",                 // DeepSeek R1 - 6k tokens/min (No daily limit)
    "compound-beta",                                  // Compound Beta - 70k tokens/min (No daily limit)
    "llama3-70b-8192",                               // Llama 3 70B - 6k tokens/min, 500k/day
    "gemma2-9b-it",                                  // Gemma 2 - 15k tokens/min, 500k/day
    "llama-3.1-8b-instant",                         // Fast Llama 3.1 - 6k tokens/min, 500k/day
    "llama3-8b-8192"                                 // Llama 3 8B - 6k tokens/min, 500k/day
  ];

  for (const model of models) {
    try {
      console.log(`üîÑ Trying model: ${model}`);
      
      const completion = await groq.chat.completions.create({        messages: [          {
            role: "system",
            content: "Vous √™tes un tech lead senior avec 15+ ans d'exp√©rience en d√©veloppement logiciel, architecture cloud et ing√©nierie. Vous r√©digez des articles techniques de haute qualit√© pour une audience de d√©veloppeurs exp√©riment√©s. G√©n√©rez UNIQUEMENT du JSON valide sans texte suppl√©mentaire. Cr√©ez du contenu substantiel, d√©taill√© et SP√âCIFIQUE au sujet trait√© - √©vitez les g√©n√©ralit√©s et concentrez-vous sur des informations concr√®tes et actionnables."
          },
          {
            role: "user",
            content: prompt
          }        ],
        model: model,
        temperature: 0.7,
        max_tokens: 8000,  // Increased for longer content
      });

      const response = completion.choices[0]?.message?.content;
        if (!response) {
        throw new Error(`No response from Groq API with model ${model}`);
      }      console.log(`üìù Raw response from ${model}:`, response.substring(0, 300) + '...');

      // Enhanced JSON cleaning and parsing
      let cleanedResponse = response.trim();
      
      // Remove markdown code blocks if present
      cleanedResponse = cleanedResponse.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      
      // Remove any leading/trailing text that might not be JSON
      const jsonStart = cleanedResponse.indexOf('{');
      const jsonEnd = cleanedResponse.lastIndexOf('}');
      
      if (jsonStart === -1 || jsonEnd === -1) {
        console.log(`üîç No JSON brackets found in response from ${model}`);
        throw new Error(`No valid JSON found in response from model ${model}`);
      }
      
      let jsonString = cleanedResponse.substring(jsonStart, jsonEnd + 1);
      
      // Clean up problematic characters while preserving content
      jsonString = jsonString
        .replace(/\r\n/g, '\\n')
        .replace(/\r/g, '\\n')
        .replace(/(?<!\\)\n/g, '\\n')  // Replace unescaped newlines
        .replace(/\t/g, '\\t')
        .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, ''); // Remove control characters except \n and \t
        
      console.log(`üßπ Cleaned JSON for ${model}:`, jsonString.substring(0, 300) + '...');

      let blogData: GeneratedPost;
      try {
        blogData = JSON.parse(jsonString) as GeneratedPost;      } catch (parseError) {
        console.error(`JSON parse error for ${model}:`, parseError);
        console.log(`üìÑ Attempting to create comprehensive fallback content for: ${randomTopic}`);
          // Create a comprehensive fallback article with unified structure
        const title = `${randomTopic}: Guide Complet pour les D√©veloppeurs`;
        const content = `# ${title}

## Introduction

${randomTopic} repr√©sente aujourd'hui un enjeu majeur pour les √©quipes de d√©veloppement modernes. Cette technologie/approche transforme la fa√ßon dont nous concevons, d√©veloppons et d√©ployons nos applications.

Dans un contexte o√π l'innovation technologique s'acc√©l√®re, ma√Ætriser ${randomTopic} devient essentiel pour rester comp√©titif. Cet article vous guidera √† travers les concepts cl√©s, les bonnes pratiques et les strat√©gies d'impl√©mentation √©prouv√©es.

Que vous soyez d√©veloppeur exp√©riment√© ou architecte technique, vous d√©couvrirez des insights pratiques pour optimiser vos projets et am√©liorer la qualit√© de vos solutions.

## Contexte et Enjeux Sp√©cifiques

### D√©fis techniques actuels

L'adoption de ${randomTopic} r√©pond √† plusieurs probl√©matiques critiques :

- **Complexit√© croissante** des syst√®mes distribu√©s
- **Besoins de performance** et de scalabilit√©
- **Exigences de s√©curit√©** renforc√©es
- **Time-to-market** acc√©l√©r√©

### Impact sur les √©quipes

${randomTopic} transforme les m√©thodes de travail en introduisant :

1. **Nouvelles comp√©tences** techniques requises
2. **Processus** de d√©veloppement optimis√©s
3. **Collaboration** renforc√©e entre √©quipes
4. **Monitoring** et observabilit√© am√©lior√©s

## Concepts Fondamentaux

### D√©finitions techniques

${randomTopic} s'appuie sur plusieurs concepts essentiels :

- **Architecture** : Principes de conception modulaire
- **Patterns** : Mod√®les √©prouv√©s pour ${randomTopic}
- **Protocoles** : Standards de communication
- **Outils** : √âcosyst√®me technologique d√©di√©

### Principes cl√©s

1. **Simplicit√©** : Privil√©gier les solutions √©prouv√©es
2. **Modularit√©** : D√©coupage en composants autonomes
3. **R√©silience** : Gestion proactive des pannes
4. **Observabilit√©** : Monitoring en temps r√©el

## Mise en Pratique Concr√®te

### Configuration initiale

\`\`\`javascript
// Configuration de base pour ${randomTopic}
const config = {
  mode: 'production',
  timeout: 5000,
  retries: 3,
  monitoring: true
};

// Initialisation
async function initializeSystem() {
  try {
    await setupConfiguration(config);
    console.log('${randomTopic} initialis√© avec succ√®s');
  } catch (error) {
    console.error('Erreur d\\'initialisation:', error);
  }
}
\`\`\`

### √âtapes d'impl√©mentation

1. **Planification** : Analyse des besoins sp√©cifiques
2. **Prototypage** : Validation des concepts
3. **D√©veloppement** : Impl√©mentation incr√©mentale
4. **Tests** : Validation fonctionnelle et performance
5. **D√©ploiement** : Mise en production progressive

## Bonnes Pratiques

### Recommandations techniques

- **Code Quality** : Standards de d√©veloppement rigoureux
- **Documentation** : Specifications techniques d√©taill√©es
- **Testing** : Couverture de tests automatis√©s
- **Security** : Audit de s√©curit√© r√©gulier

### Erreurs courantes √† √©viter

1. **Over-engineering** : Complexit√© excessive
2. **Vendor lock-in** : D√©pendance technologique
3. **Monitoring insuffisant** : Observabilit√© limit√©e
4. **Formation n√©glig√©e** : Mont√©e en comp√©tences

## Outils et √âcosyst√®me

### Technologies recommand√©es

- **Frameworks** : Solutions matures et maintenues
- **Biblioth√®ques** : Composants r√©utilisables
- **Monitoring** : Outils d'observabilit√©
- **CI/CD** : Cha√Ænes d'automatisation

### Solutions du march√©

| Cat√©gorie | Solutions | Avantages |
|-----------|-----------|-----------|
| Open Source | Solutions communautaires | Flexibilit√©, co√ªt |
| Enterprise | Plateformes commerciales | Support, fonctionnalit√©s |
| Cloud | Services manag√©s | Scalabilit√©, maintenance |

## Cas d'Usage R√©els

### Secteurs d'application

${randomTopic} trouve des applications dans de nombreux domaines :

- **E-commerce** : Optimisation des performances
- **Fintech** : S√©curisation des transactions
- **Healthcare** : Conformit√© r√©glementaire
- **Gaming** : Exp√©rience utilisateur temps r√©el

### Retours d'exp√©rience

Les organisations ayant adopt√© ${randomTopic} rapportent :

- **Am√©lioration de 40%** de la productivit√© d√©veloppeur
- **R√©duction de 60%** des incidents production
- **Acc√©l√©ration de 30%** du time-to-market
- **Diminution de 50%** des co√ªts op√©rationnels

## Perspectives d'Avenir

### √âvolutions pr√©vues

L'√©cosyst√®me ${randomTopic} √©volue vers :

- **Intelligence Artificielle** : Automatisation intelligente
- **Edge Computing** : Traitement distribu√©
- **Sustainability** : Solutions √©co-responsables
- **Zero Trust** : S√©curit√© par design

### Recommandations strat√©giques

Pour anticiper l'avenir :

1. **Veille technologique** continue
2. **Formation** des √©quipes
3. **Exp√©rimentation** contr√¥l√©e
4. **Partenariats** technologiques

## Conclusion

${randomTopic} s'impose comme un pilier fondamental de l'architecture logicielle moderne. Son adoption n√©cessite une approche m√©thodique alliant expertise technique et vision strat√©gique.

Les b√©n√©fices √† long terme justifient l'investissement initial en formation et infrastructure. Les √©quipes qui ma√Ætrisent ${randomTopic} sont mieux positionn√©es pour relever les d√©fis technologiques de demain.

L'√©cosyst√®me continuant d'√©voluer rapidement, maintenir une veille active et exp√©rimenter r√©guli√®rement restent essentiels pour tirer pleinement parti de ces technologies.`;
        
        const excerpt = `Guide complet sur ${randomTopic} : concepts, impl√©mentation et bonnes pratiques pour les d√©veloppeurs.`;
        
        blogData = {
          title,
          content,
          excerpt,
          categories: [randomCategory],
          tags: ["D√©veloppement", "Architecture", "Bonnes-Pratiques", "Guide", "Tech"]
        };
      }
      
      // Validate the response structure
      if (!blogData.title || !blogData.content || !blogData.excerpt) {
        throw new Error(`Invalid response structure from model ${model}`);
      }

      // Ensure categories and tags are arrays
      if (!Array.isArray(blogData.categories)) {
        blogData.categories = [randomCategory];
      }      if (!Array.isArray(blogData.tags)) {
        blogData.tags = ["D√©veloppement", "Tech", "Innovation"];
      }

      console.log(`‚úÖ Successfully generated post with model: ${model}`);
      return blogData;

    } catch (error) {
      console.error(`‚ùå Error with model ${model}:`, error);
      // Continue to next model
    }
  }

  // If all models fail, throw error
  throw new Error('Failed to generate blog content with any available model');
}
